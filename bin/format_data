#!/usr/bin/env ruby

require "json"
require "nokogiri"
require "pry"
require "net/http"
require "csv"

def format_int(value, type)
  return value unless %w(gen purity).include?(type)
  value.to_i
end

trait_hsh = {}

TRAIT_DICT = {
  "gen" => "Generation",
  "gender" => "Gender",
  "purity" => "Purity",
  "type" => "Type",
  "body" => "Stance",
  "hair_decor" => "Headwear",
  "doll" => "Hand Item",
  "clothes" => "Clothes"
}

FANCIES = {
  "skeleton" => {
    "Headwear" => "None",
    "Hand Item" => "Fire Ball",
    "Clothes" => "Red Cape",
    "Stance" => "Standing",
  },
  "robot" => {
    "Headwear" => "Robot Helmet",
    "Hand Item" => "Nothing",
    "Clothes" => "Robot Suit",
    "Stance" => "Standing",
  },
  "bride" => {
    "Headwear" => "Bridal Hat",
    "Hand Item" => "Nothing",
    "Clothes" => "Bridal Dress",
    "Stance" => "Standing",
  }
}

File.open('./os-metadata.ndjson').each_line.map do |l|
  line = JSON.parse(l, object_class: OpenStruct)
  next if line.image_original_url.nil?
  arr = []

  # Setting nulls/undefined to 0
  TRAIT_DICT.values.each do |trait|
    trait_hsh[trait] ||= {}
    trait_hsh[trait][""] = 0
  end

  line.traits.each do |hsh|
    arr << { trait_type: TRAIT_DICT[hsh.trait_type.downcase], value: format_int(hsh.value, hsh.trait_type) }
  end

  if File.extname(line.image_original_url.to_s) == ".svg"
    Nokogiri::XML(open("./svgs/#{line.token_id}.svg")).elements[0].elements.each do |ele|
      type = TRAIT_DICT[ele.attributes.values[0].value.downcase]
      next if type.nil?

      trait_hsh[type] ||= {}
      md = ele.children.to_s

      value = if !!trait_hsh[type][md]
        trait_hsh[type][md]
      else
        trait_hsh[type][md] = trait_hsh[type].size
      end

      if File.exist?("csvs/#{type}.csv")
        value = CSV.read("csvs/#{type}.csv", headers: true).find { |x| x["Trait Number"] == value.to_s }["Human Readable Name"]
      end

      arr << { trait_type: type, value: value }
    end
  else
    fancy_type = arr.select { |x| x[:trait_type] == "Type" }[0][:value]

    (TRAIT_DICT.values - %w(Gender Generation Purity Type)).each do |trait|
      value = if %w(Hand\ Item Headwear Clothes Stance).include?(trait)
        if trait_hsh[trait][fancy_type]
          trait_hsh[trait][fancy_type]
        else
          trait_hsh[trait][fancy_type] = trait_hsh[trait].size
        end
        FANCIES.fetch(fancy_type, {}).fetch(trait, "guardian")
      else
        if trait_hsh[trait][fancy_type]
          trait_hsh[trait][fancy_type]
        else
          trait_hsh[trait][fancy_type] = trait_hsh[trait].size
        end
      end
      arr << { trait_type: trait, value: value }
    end
  end

  if arr.length != 8
    (TRAIT_DICT.values - arr.map { |x| x[:trait_type] }).each do |trait|
      arr << { trait_type: trait, value: "Nothing" }
    end
  end

  hsh = {
    description: "This Panda was wrapped using the Wrapped Panda contract, accessible from https://wrappedpandas.com",
    name: line.name,
    image: "https://pandapandas.s3.us-west-2.amazonaws.com/images/#{line.token_id}.png",
    external_url: "https://wrappedpandas.com",
    attributes: arr,
    id: line.token_id.to_i
  }

  open('final.ndjson', 'a') do |f|
    p hsh
    f << JSON.dump(hsh)
    f << "\n"
  end
end
